package com.automation.reporting;

import com.automation.core.ConfigReader;
import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.reporter.ExtentSparkReporter;
import com.aventstack.extentreports.reporter.configuration.Theme;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * ExtentReports Manager for generating HTML test reports
 * Provides centralized management of ExtentReports functionality
 *
 * Example:
 *     ExtentReportManager.initializeReport();
 *     ExtentTest test = ExtentReportManager.createTest("Test Name", "Test Description");
 *     test.pass("Step passed");
 *     ExtentReportManager.flushReport();
 */
public class ExtentReportManager {

    private static final Logger logger = LogManager.getLogger(ExtentReportManager.class);
    private static ExtentReports extentReports;
    private static ExtentSparkReporter sparkReporter;
    private static final ThreadLocal<ExtentTest> extentTestThreadLocal = new ThreadLocal<>();

    private static final String REPORTS_DIR = "reports";
    private static final String SCREENSHOTS_DIR = "reports/screenshots";

    /**
     * Initialize ExtentReports with configuration
     */
    public static void initializeReport() {
        if (extentReports == null) {
            createReportsDirectory();

            String timestamp = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss").format(new Date());
            String reportPath = REPORTS_DIR + "/ExtentReport_" + timestamp + ".html";

            // Create Spark Reporter
            sparkReporter = new ExtentSparkReporter(reportPath);
            configureSparkReporter();

            // Create ExtentReports instance
            extentReports = new ExtentReports();
            extentReports.attachReporter(sparkReporter);
            setSystemInformation();

            logger.info("ExtentReports initialized. Report will be generated at: {}", reportPath);
        }
    }

    /**
     * Configure Spark Reporter settings
     */
    private static void configureSparkReporter() {
        sparkReporter.config().setTheme(Theme.STANDARD);
        sparkReporter.config().setDocumentTitle("Automation Test Report");
        sparkReporter.config().setReportName("Selenium Java Test Execution Report");
        sparkReporter.config().setTimeStampFormat("yyyy-MM-dd HH:mm:ss");

        // Add custom CSS for better appearance
        sparkReporter.config().setCss(
                ".r-img { width: 100%; } " +
                        ".test-item { margin-bottom: 10px; } " +
                        ".step-details { font-size: 13px; }"
        );

        // Add custom JavaScript
        sparkReporter.config().setJs(
                "document.addEventListener('DOMContentLoaded', function() {" +
                        "  console.log('ExtentReports loaded successfully');" +
                        "});"
        );
    }

    /**
     * Set system information in the report
     */
    private static void setSystemInformation() {
        extentReports.setSystemInfo("Operating System", System.getProperty("os.name"));
        extentReports.setSystemInfo("OS Version", System.getProperty("os.version"));
        extentReports.setSystemInfo("Java Version", System.getProperty("java.version"));
        extentReports.setSystemInfo("User Name", System.getProperty("user.name"));
        extentReports.setSystemInfo("Browser", ConfigReader.getBrowser());
        extentReports.setSystemInfo("Environment", ConfigReader.getEnvironment());
        extentReports.setSystemInfo("Headless Mode", String.valueOf(ConfigReader.isHeadless()));

        // Add test execution details
        extentReports.setSystemInfo("Test Execution Time", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));
        extentReports.setSystemInfo("Framework", "Selenium Java TestNG");
        extentReports.setSystemInfo("Report Generated By", "ExtentReports v5.1.2");
    }

    /**
     * Create reports directory if it doesn't exist
     */
    private static void createReportsDirectory() {
        File reportsDir = new File(REPORTS_DIR);
        File screenshotsDir = new File(SCREENSHOTS_DIR);

        if (!reportsDir.exists()) {
            reportsDir.mkdirs();
            logger.info("Created reports directory: {}", REPORTS_DIR);
        }

        if (!screenshotsDir.exists()) {
            screenshotsDir.mkdirs();
            logger.info("Created screenshots directory: {}", SCREENSHOTS_DIR);
        }
    }

    /**
     * Create a new test in ExtentReports
     * @param testName Test name
     * @param testDescription Test description
     * @return ExtentTest instance
     */
    public static ExtentTest createTest(String testName, String testDescription) {
        ExtentTest test = extentReports.createTest(testName, testDescription);
        extentTestThreadLocal.set(test);
        logger.debug("Created ExtentTest: {}", testName);
        return test;
    }

    /**
     * Create a new test with category
     * @param testName Test name
     * @param testDescription Test description
     * @param category Test category/tag
     * @return ExtentTest instance
     */
    public static ExtentTest createTest(String testName, String testDescription, String category) {
        ExtentTest test = extentReports.createTest(testName, testDescription);
        test.assignCategory(category);
        extentTestThreadLocal.set(test);
        logger.debug("Created ExtentTest with category: {} - {}", testName, category);
        return test;
    }

    /**
     * Get current test from ThreadLocal
     * @return Current ExtentTest instance
     */
    public static ExtentTest getCurrentTest() {
        return extentTestThreadLocal.get();
    }

    /**
     * Remove test from ThreadLocal
     */
    public static void removeTest() {
        extentTestThreadLocal.remove();
    }

    /**
     * Add screenshot to current test
     * @param screenshotPath Path to screenshot
     * @param title Screenshot title
     */
    public static void addScreenshot(String screenshotPath, String title) {
        ExtentTest test = getCurrentTest();
        if (test != null) {
            try {
                test.addScreenCaptureFromPath(screenshotPath, title);
                logger.debug("Added screenshot to test: {}", title);
            } catch (Exception e) {
                logger.error("Failed to add screenshot: {}", e.getMessage());
            }
        }
    }

    /**
     * Log info step to current test
     * @param message Info message
     */
    public static void logInfo(String message) {
        ExtentTest test = getCurrentTest();
        if (test != null) {
            test.info(message);
        }
    }

    /**
     * Log pass step to current test
     * @param message Pass message
     */
    public static void logPass(String message) {
        ExtentTest test = getCurrentTest();
        if (test != null) {
            test.pass(message);
        }
    }

    /**
     * Log fail step to current test
     * @param message Fail message
     */
    public static void logFail(String message) {
        ExtentTest test = getCurrentTest();
        if (test != null) {
            test.fail(message);
        }
    }

    /**
     * Log warning step to current test
     * @param message Warning message
     */
    public static void logWarning(String message) {
        ExtentTest test = getCurrentTest();
        if (test != null) {
            test.warning(message);
        }
    }

    /**
     * Log skip step to current test
     * @param message Skip message
     */
    public static void logSkip(String message) {
        ExtentTest test = getCurrentTest();
        if (test != null) {
            test.skip(message);
        }
    }

    /**
     * Add test author information
     * @param author Author name
     */
    public static void addAuthor(String author) {
        ExtentTest test = getCurrentTest();
        if (test != null) {
            test.assignAuthor(author);
        }
    }

    /**
     * Add test device information
     * @param device Device name
     */
    public static void addDevice(String device) {
        ExtentTest test = getCurrentTest();
        if (test != null) {
            test.assignDevice(device);
        }
    }

    /**
     * Add test category/tag
     * @param category Category name
     */
    public static void addCategory(String category) {
        ExtentTest test = getCurrentTest();
        if (test != null) {
            test.assignCategory(category);
        }
    }

    /**
     * Flush the ExtentReports (write to file)
     */
    public static void flushReport() {
        if (extentReports != null) {
            extentReports.flush();
            logger.info("ExtentReports flushed successfully");
        }
    }

    /**
     * Get the ExtentReports instance
     * @return ExtentReports instance
     */
    public static ExtentReports getExtentReports() {
        return extentReports;
    }
}